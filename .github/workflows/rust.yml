name: Rust CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Run tests
      run: cargo test --verbose
    - name: Run tests with all features
      run: cargo test --all-features --verbose

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - name: Check formatting
      run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build
    needs: [test, fmt, clippy]
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-suffix: .exe
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            binary-suffix: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary-suffix: ""
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Install musl tools (Linux)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Build binary
      run: cargo build --release --features cli --target ${{ matrix.target }}
    - name: Create artifact directory
      run: mkdir -p artifacts
    - name: Copy binary (Windows)
      if: runner.os == 'Windows'
      run: |
        cp target/${{ matrix.target }}/release/whatever-find${{ matrix.binary-suffix }} artifacts/whatever-find-${{ matrix.target }}${{ matrix.binary-suffix }}
    - name: Copy binary (Unix)
      if: runner.os != 'Windows'
      run: |
        cp target/${{ matrix.target }}/release/whatever-find${{ matrix.binary-suffix }} artifacts/whatever-find-${{ matrix.target }}${{ matrix.binary-suffix }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: whatever-find-${{ matrix.target }}
        path: artifacts/whatever-find-${{ matrix.target }}${{ matrix.binary-suffix }}

  release:
    name: Release
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    - name: Create release archives
      run: |
        cd artifacts
        for dir in */; do
          if [ -d "$dir" ]; then
            cd "$dir"
            if [[ $dir == *"windows"* ]]; then
              zip -r "../${dir%/}.zip" .
            else
              tar -czf "../${dir%/}.tar.gz" .
            fi
            cd ..
          fi
        done
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.{zip,tar.gz}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
    - name: Generate code coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: cobertura.xml
        fail_ci_if_error: false